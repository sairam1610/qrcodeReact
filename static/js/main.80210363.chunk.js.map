{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","cameraCallBack","setState","showQRScanner","state","delay","result","handleScan","bind","window","gotCameraPermisssion","this","Android","getCameraPermission","data","console","log","err","error","className","style","height","width","facingMode","onError","handleError","onScan","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQA0DeA,E,kDArDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAeRC,eAAe,WACb,EAAKC,SAAS,CAACC,eAAc,KAf7B,EAAKC,MAAQ,CACXC,MAAO,IACPF,eAAe,EACfG,OAAQ,aAGV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBARF,E,qDAWlB,WACEC,OAAOC,qBAAuBC,KAAKV,eACnCQ,OAAOG,SAAYH,OAAOG,QAAQC,oBAAoB,0B,wBAOxD,SAAWC,GACTC,QAAQC,IAAIF,GACZH,KAAKT,SAAS,CACZI,OAAQQ,M,yBAGZ,SAAYG,GACVF,QAAQG,MAAMD,K,oBAEhB,WAME,OACE,gCACE,qBAAKE,UAAU,QAAf,oCACCR,KAAKP,MAAMD,eACN,cAAC,IAAD,CACEE,MAAOM,KAAKP,MAAMC,MAClBe,MAXS,CACnBC,OAAQ,IACRC,MAAO,KAUGC,WAAY,cACZC,QAASb,KAAKc,YACdC,OAAQf,KAAKJ,aAGrB,oDAAuBI,KAAKP,MAAME,iB,GAhDxBqB,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.80210363.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component } from 'react'\nimport QrReader from 'react-qr-reader'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      delay: 1000,\n      showQRScanner: false,\n      result: 'No result',\n    }\n\n    this.handleScan = this.handleScan.bind(this)\n  }\n\n  componentDidMount(){\n    window.gotCameraPermisssion = this.cameraCallBack;\n    window.Android &&  window.Android.getCameraPermission('gotCameraPermisssion')\n  }\n\n  cameraCallBack=()=>{\n    this.setState({showQRScanner:true})\n  }\n\n  handleScan(data){\n    console.log(data)\n    this.setState({\n      result: data,\n    })\n  }\n  handleError(err){\n    console.error(err)\n  }\n  render(){\n    const previewStyle = {\n      height: 400,\n      width: 400,\n    }\n\n    return(\n      <div>\n        <div className=\"title\">Scan Flipkart QR Code </div>\n        {this.state.showQRScanner && \n              <QrReader\n                delay={this.state.delay}\n                style={previewStyle}\n                facingMode={\"environment\"}\n                onError={this.handleError}\n                onScan={this.handleScan}\n                />\n           }\n        <p>QR Code Detected - {this.state.result}</p>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}